# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `demo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if '_t_GuestList' not in _M_Demo.__dict__:
    _M_Demo._t_GuestList = IcePy.defineSequence('::Demo::GuestList', (), IcePy._t_string)

_M_Demo._t_GuestBook = IcePy.defineValue('::Demo::GuestBook', Ice.Value, -1, (), False, True, None, ())

if 'GuestBookPrx' not in _M_Demo.__dict__:
    _M_Demo.GuestBookPrx = Ice.createTempClass()
    class GuestBookPrx(Ice.ObjectPrx):

        def write(self, msg, context=None):
            return _M_Demo.GuestBook._op_write.invoke(self, ((msg, ), context))

        def writeAsync(self, msg, context=None):
            return _M_Demo.GuestBook._op_write.invokeAsync(self, ((msg, ), context))

        def begin_write(self, msg, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.GuestBook._op_write.begin(self, ((msg, ), _response, _ex, _sent, context))

        def end_write(self, _r):
            return _M_Demo.GuestBook._op_write.end(self, _r)

        def read(self, context=None):
            return _M_Demo.GuestBook._op_read.invoke(self, ((), context))

        def readAsync(self, context=None):
            return _M_Demo.GuestBook._op_read.invokeAsync(self, ((), context))

        def begin_read(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.GuestBook._op_read.begin(self, ((), _response, _ex, _sent, context))

        def end_read(self, _r):
            return _M_Demo.GuestBook._op_read.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.GuestBookPrx.ice_checkedCast(proxy, '::Demo::GuestBook', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.GuestBookPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::GuestBook'
    _M_Demo._t_GuestBookPrx = IcePy.defineProxy('::Demo::GuestBook', GuestBookPrx)

    _M_Demo.GuestBookPrx = GuestBookPrx
    del GuestBookPrx

    _M_Demo.GuestBook = Ice.createTempClass()
    class GuestBook(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::GuestBook', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::GuestBook'

        @staticmethod
        def ice_staticId():
            return '::Demo::GuestBook'

        def write(self, msg, current=None):
            raise NotImplementedError("servant method 'write' not implemented")

        def read(self, current=None):
            raise NotImplementedError("servant method 'read' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_GuestBookDisp)

        __repr__ = __str__

    _M_Demo._t_GuestBookDisp = IcePy.defineClass('::Demo::GuestBook', GuestBook, (), None, ())
    GuestBook._ice_type = _M_Demo._t_GuestBookDisp

    GuestBook._op_write = IcePy.Operation('write', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    GuestBook._op_read = IcePy.Operation('read', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Demo._t_GuestList, False, 0), ())

    _M_Demo.GuestBook = GuestBook
    del GuestBook

_M_Demo._t_Greet = IcePy.defineValue('::Demo::Greet', Ice.Value, -1, (), False, True, None, ())

if 'GreetPrx' not in _M_Demo.__dict__:
    _M_Demo.GreetPrx = Ice.createTempClass()
    class GreetPrx(Ice.ObjectPrx):

        def greetMsg(self, msg, context=None):
            return _M_Demo.Greet._op_greetMsg.invoke(self, ((msg, ), context))

        def greetMsgAsync(self, msg, context=None):
            return _M_Demo.Greet._op_greetMsg.invokeAsync(self, ((msg, ), context))

        def begin_greetMsg(self, msg, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Greet._op_greetMsg.begin(self, ((msg, ), _response, _ex, _sent, context))

        def end_greetMsg(self, _r):
            return _M_Demo.Greet._op_greetMsg.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.GreetPrx.ice_checkedCast(proxy, '::Demo::Greet', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.GreetPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Greet'
    _M_Demo._t_GreetPrx = IcePy.defineProxy('::Demo::Greet', GreetPrx)

    _M_Demo.GreetPrx = GreetPrx
    del GreetPrx

    _M_Demo.Greet = Ice.createTempClass()
    class Greet(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Greet', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Greet'

        @staticmethod
        def ice_staticId():
            return '::Demo::Greet'

        def greetMsg(self, msg, current=None):
            raise NotImplementedError("servant method 'greetMsg' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_GreetDisp)

        __repr__ = __str__

    _M_Demo._t_GreetDisp = IcePy.defineClass('::Demo::Greet', Greet, (), None, ())
    Greet._ice_type = _M_Demo._t_GreetDisp

    Greet._op_greetMsg = IcePy.Operation('greetMsg', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_Demo.Greet = Greet
    del Greet

# End of module Demo
